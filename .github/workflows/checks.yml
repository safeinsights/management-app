name: Checks
on:
    push:
        branches:
            - main
    pull_request: {}

jobs:
    lint:
        timeout-minutes: 5
        runs-on: ubuntu-latest
        permissions: {}
        steps:
            - uses: actions/checkout@v4
            - uses: actions/setup-node@v4
              with:
                  node-version: 22
                  cache: 'npm'
            - name: npm install
              run: npm ci
            - name: show versions
              run: npm ls
            - name: npm run checks
              run: npm run checks
            - name: validate actions
              run: npm run validate-actions

    test:
        timeout-minutes: 15
        runs-on: ubuntu-latest
        services:
            db:
                image: postgres:15
                ports:
                    - 5432:5432
                env:
                    POSTGRES_USER: si
                    POSTGRES_DB: si_test
                    POSTGRES_PASSWORD: si
                options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
            minio:
                image: minio/minio:edge-cicd
                ports:
                    - 9198:9000
                volumes:
                    - minio-data:/data
                env:
                    MINIO_ROOT_USER: si-local-minio
                    MINIO_ROOT_PASSWORD: si-local-minio
            minio-mc:
                image: minio/mc
        permissions:
            pull-requests: write
            contents: write
            pages: write
        env:
            DATABASE_URL: 'postgres://si:si@localhost:5432/si_test'
            SIMULATE_IMAGE_BUILD: 't'
            NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
            CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
            CLERK_RESEARCHER_EMAIL: ${{ secrets.CLERK_RESEARCHER_EMAIL }}
            CLERK_RESEARCHER_PASSWORD: ${{ secrets.CLERK_RESEARCHER_PASSWORD }}
            AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
            CLERK_REVIEWER_EMAIL: ${{ secrets.CLERK_REVIEWER_EMAIL }}
            CLERK_REVIEWER_PASSWORD: ${{ secrets.CLERK_REVIEWER_PASSWORD }}
            CLERK_ADMIN_EMAIL: ${{ secrets.CLERK_ADMIN_EMAIL }}
            CLERK_ADMIN_PASSWORD: ${{ secrets.CLERK_ADMIN_PASSWORD }}
            S3_ENDPOINT: 'http://localhost:9198'
            S3_BROWSER_ENDPOINT: 'http://localhost:9198'
            MINIO_ROOT_USER: 'si-local-minio'
            MINIO_ROOT_PASSWORD: 'si-local-minio'
            AWS_ACCESS_KEY_ID: 'si-local-minio'
            AWS_SECRET_ACCESS_KEY: 'si-local-minio'
            BUCKET_NAME: 'mgmt-app-local'
            AWS_REGION: 'us-east-1'
            PORT: '4000'
            NEXT_PUBLIC_CLERK_DOMAIN: 'localhost:4000'
        steps:
            - uses: actions/checkout@v4
            - uses: actions/setup-node@v4
              with:
                  node-version: 22
                  cache: 'npm'
            - name: Download mc CLI
              run: |
                  curl -O https://dl.min.io/client/mc/release/linux-amd64/mc
                  chmod +x mc
                  ./mc --version
            - name: Setup minio bucket
              run: |
                  ./mc alias set siminio http://localhost:9198 si-local-minio si-local-minio
                  ./mc mb siminio/mgmt-app-local

            - name: npm install
              run: npm ci

            # If this becomes an issue long term with time, we can try re-implementing caching
            # https://github.com/microsoft/playwright/issues/7249#issuecomment-2664215505
            - name: install playwright dependencies
              run: npx playwright install --with-deps --only-shell chromium
            - name: provision db
              run: npm run db:migrate
            - name: npm run test:unit
              run: npm run test:unit
            - name: build and run server
              run: npm run ci:server -- server_output.log
            - name: npm run test:e2e
              run: npm run test:e2e
            - name: npm run test:coverage
              run: npm run test:coverage
            - name: Add code coverage to actions summary
              run: |
                  cat test-results/coverage/coverage-summary.md >> $GITHUB_STEP_SUMMARY
                  cat test-results/coverage/coverage-details.md >> $GITHUB_STEP_SUMMARY
            - name: Coverage Diff
              uses: bultkrantz/coverage-diff-action@v5.0.1
              with:
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  base-summary-filename: base-summary.json
                  coverage-filename: test-results/coverage/coverage-summary.json
                  allowed-to-fail: true
            - name: Display server log
              run: cat server_output.log
              if: always()
            - uses: actions/upload-artifact@v4
              if: failure()
              with:
                  name: playwright-report
                  path: test-results/e2e
                  retention-days: 30
